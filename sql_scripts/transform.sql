// Create a stream on the staging table
USE SCHEMA INGEST;

CREATE OR REPLACE STREAM
    INGEST.ST_CDC_STG_F_BICING_STATIONS
ON TABLE INGEST.STG_F_BICING_STATIONS
;

select system$stream_has_data('ST_CDC_STG_F_BICING_STATIONS');

SELECT * FROM ST_CDC_STG_F_BICING_STATIONS;

CREATE OR REPLACE TABLE
    SERVE.F_LAST_UPDATED_STATUS
(
    STATION_ID INTEGER,
    NUM_BIKES_AVAILABLE INTEGER,
    NUM_BIKES_AVAILABLE_MECHANICAL INTEGER,
    NUM_BIKES_AVAILABLE_EBIKE INTEGER,
    NUM_DOCKS_AVAILABLE INTEGER,
    LAST_REPORTED INTEGER,
    IS_CHARGING_STATION BOOLEAN,
    STATUS VARCHAR(1024),
    IS_INSTALLED INTEGER,
    IS_RENTING INTEGER,
    IS_RETURNING INTEGER,
    TRAFFIC VARCHAR(1024),
    TST_REC TIMESTAMP_NTZ(9)
);

CREATE OR REPLACE PROCEDURE
    SP_REFRESH_LAST_UPDATED_STATUS()
/** This is the stored procedure that executes the logic. */
    RETURNS STRING
    LANGUAGE SQL
    EXECUTE AS CALLER
AS
$$
BEGIN
    TRUNCATE TABLE SERVE.F_LAST_UPDATED_STATUS;
    INSERT INTO SERVE.F_LAST_UPDATED_STATUS
    SELECT
        STATION_ID,
        NUM_BIKES_AVAILABLE,
        NUM_BIKES_AVAILABLE_MECHANICAL,
        NUM_BIKES_AVAILABLE_EBIKE,
        NUM_DOCKS_AVAILABLE,
        LAST_REPORTED,
        IS_CHARGING_STATION,
        STATUS,
        IS_INSTALLED,
        IS_RENTING,
        IS_RETURNING,
        TRAFFIC,
        TST_REC
    FROM INGEST.ST_CDC_STG_F_BICING_STATIONS;
    RETURN 'Done';
END
$$
;

CREATE OR REPLACE TASK
    TSK_REFRESH_LAST_UPDATED_STATUS
    WAREHOUSE='COMPUTE_WH'
    SCHEDULE = '5 minutes'
WHEN
    system$stream_has_data('ST_CDC_STG_F_BICING_STATIONS')
AS
    CALL SP_REFRESH_LAST_UPDATED_STATUS()
;

ALTER TASK TSK_REFRESH_LAST_UPDATED_STATUS RESUME;

SHOW TASKS;
